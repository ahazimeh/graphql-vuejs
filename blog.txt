composer require --dev barryvdh/laravel-ide-helper // to help your editor understand laravel better

composer require laravel/ui //lets you quickly scaffold your frontend
php artisan ui vue
npm install & npm run dev


npm install tailwindcss
resources/css, create a folder called app.css and past the 3 directives from the documentation
from docs: npx tailwindcss init// it creates tailwind.config.js
tailwind laravel mix

<link rel="stylesheet" href=" {{ asset('css/app.css') }} "> //path starts from public //you can use mix rather than assets so it helps adding text to your assets to version your assets, cuz assets often are cached by browsers
for mix versioning to work go to webpack file and call mix.version();
if(mix.inProduction()) mix.version();

<script src="{{ mix('js/app.js') }}" defer></script>
<div id="app>
    <router-view></router-view>
</div>


faker

Seeders:
\App\Models\User::factory(20)->create();
Topic::create(['name' => 'Featured Sites', 'slug' => 'featured']);
Topic::create(['name' => 'Useful Links', 'slug' => 'links']);
Topic::create(['name' => 'Guids & Tutorials', 'slug' => 'tutorials']);
\App\Models\Post::factory(20)->create();



public function posts() :HasMany //need to import HasMany //BelongsTo
{
    return $this->hasMany(Post::class);
}

$table->unsignedBigInteger('topic_id)->index();

php artisan make:factory PostFactory
$this->faker->name(),
$this->faker->unique()->safeEmail()
$this->faker->sentence(3)//3 words
$this->faker->paragraph(10,true)//second argument to return it as a text and not array(default is array) //10 paragraphs
$this->faker->text(200)//200 letters

scalar?-34

learn tinker

@hasMany
@belongsTo

composer require laravel/telescope
php artisan telescope:install
php artisan migrate
127.0.0.1:8000/telescope

//SINGLE FILE VIEW COMPONENT documentation
<template>
{{ greeting }}....
</template>
<script>
model.exports = {
    data: function() {
        return {
            greeting: 'Hello';
        }
    }
}
</script>
<style scoped> //scoped is used to apply css to only this component
</style>

//VUE ROUTER
npm install vue-router
go to app.js and remove Vue.component//example component//I should know what it does
//in bootstrap.js remove proper, jquery, and bootstrap
//remove axios
//he only left lodash
//imports
    //require('./bootstrap') => import './bootstrap';
    //require('vue'); => import Vue from 'vue'; //Vue because it is the default export when cntr click on 'vue'
    //require('lodash'); => import * as lodash from 'lodash'; then use lodash rather than require('lodash');
    
    
    
    docs Router
    import VueRouter from 'vue-router';
    Vue.use(VueRouter)
    const routes = [
    {
        path: '/',
        name: 'index',
        component:PostList
    },
    {
        path: '/post/:id',
        name: 'post',
        component:Post
    },
    {
        path:'/topic/:slug',
        name:'topic',
        component:TopicPostList
    },
    {
        path:'/authors/:id',
        name:'author',
        component:AuthorPostList
    },
    {
        path:'*',
        name:'404',
        component: {
            template: '<div>Not found</div>'
        }
    }
];
const router = new VueRouter({
    mode: 'history',
    routes:routes
})
const app = new Vue({
    el: '#app',
    //apolloProvider,
    router:router
});


//HTML5 History Mode
//in vue router docs
mode:'history';
Route::get('/{any?}', function () {
    return view('welcome');
})->where('any','^(?!graphql)[\/\w\.-]*');

//VUE APOLLO
    npm install --save vue-apollo graphql apollo-boost
    import ApolloClient from 'apollo-boost'

    const apolloClient = new ApolloClient({
        // You should use an absolute URL here
        uri: 'http://127.0.0.1:8000/graphql'
    })
    import Vue from 'vue'
    import VueApollo from 'vue-apollo'
    Vue.use(VueApollo)
    const apolloProvider = new VueApollo({
        defaultClient: apolloClient,
    })
    //now provide apolloProvider in the vue instance

npm i graphql-tag
import gql from 'graphql-tag';
export default {
    apollo: {
        posts: gql`query{
            posts {
                id
                title
            }
        }`
    }
}